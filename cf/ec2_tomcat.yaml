AWSTemplateFormatVersion: 2010-09-09
Description: XTF Tomcat Setup.
Parameters:
  ALBListenerHttpsCertArn:
    Type: String
    Default: arn:aws:acm:us-east-1:653434772132:certificate/af92d69b-1f9c-42c3-8bd8-f8dde32b3104
  ImageId:
      Type:  String
      Default: ami-0702d6e6549da008c
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t4g.micro
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: famarch
  SSHLocation:
    Description: 'The IP address range that can be used access the web server using SSH.'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: 10.31.0.0/16
      Tags:
        - Key: 'Name'
          Value: 'XtfFamVpc'
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.31.1.0/24
      AvailabilityZone: 'us-east-1c'
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value:  'XtfFamPublicSubnet1'
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.31.2.0/24
      AvailabilityZone: 'us-east-1d'
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'XtfFamPublicSubnet2'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
  VPCGatewayAttachment:
    DependsOn:
      - InternetGateway
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow access from HTTP and SSH traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId:
            Fn::GetAtt:
            - ALBSecurityGroup
            - GroupId
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  WebServerInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref S3AccessRole
  S3AccessPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 's3:List*'
              - 's3:Get*'
            Resource: '*'
      Roles:
        - !Ref S3AccessRole
  S3AccessRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureServices
        ConfigureServices:
          files:
            /xtf/xtf/index.html:
              content: !Join 
                - |+
                - - >-
                    <h2>Welcome to...</h2></br>
                    <h1 style="color:#2813ad;">The Ancestral Pictures Archives</h1>
                    <a href='./search'>Search</a>
              mode: '000644'
              owner: root
              group: root
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref ImageId 
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref WebServerInstanceProfile
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebServerSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
          - DeviceName: /dev/sdc
            VirtualName: ephemeral0
          - DeviceName: /dev/sda2
            Ebs:
              VolumeSize: 30            
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            mkfs -t xfs /dev/nvme1n1; mkdir /xtf; mount /dev/nvme1n1 /xtf
            aws s3 cp s3://us-east-1-brainflutter-xtf-fam/xtf/v1_xtf.tar.gz /xtf/xtf.tar.gz
            cd /xtf; tar -xzvf xtf.tar.gz 
            gunzip -r /xtf/xtf
            gzip /xtf/xtf/index/pluralMap.txt
            # $CATALINA_HOME is not defined at this point or for this user
            #ln -s /xtf/xtf $CATALINA_HOME/webapps/xtf
            ln -s /xtf/xtf /bin/apache-tomcat-9.0.55/webapps/xtf
            # get xmlstarlet and add Valve to server.xml for TLS offloading at ALB to work; bounce after updating
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install -y xmlstarlet
            xmlstarlet ed -P --inplace -s Server/Service/Engine/Host -t elem -n Valve -i '$prev' -t attr -n className -v org.apache.catalina.valves.RemoteIpValve /bin/apache-tomcat-9.0.55/conf/server.xml
            systemctl restart RunTomcatonStartup.service
            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets All --region ${AWS::Region}
            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M


  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref WebServerInstance
        Port: 8080
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt ALBSecurityGroup.GroupId

  ALBListenerHttps:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref ALBListenerHttpsCertArn
      DefaultActions:
        - Type: authenticate-cognito
          Order: 1
          AuthenticateCognitoConfig:
            OnUnauthenticatedRequest: authenticate
            Scope: openid
            SessionCookieName: AWSELBAuthSessionCookie  # default
            SessionTimeout: 43200  # 12 hours
            UserPoolArn: !ImportValue xtf-cognito-CognitoUserPoolArn
            UserPoolClientId: !ImportValue xtf-cognito-CognitoUserPoolClientId
            UserPoolDomain: !ImportValue xtf-cognito-CognitoUserPoolDomain
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy:  ELBSecurityPolicy-2016-08  # default

  Route53DNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: ancestral.pictures.
      Comment: Zone apex alias targeted to ApplicationLoadBalancer.
      RecordSets:
      - Name: ancestral.pictures.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'

Outputs:
  URL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicIp
    Description: Newly created application URL
