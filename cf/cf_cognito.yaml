AWSTemplateFormatVersion: 2010-09-09
Description: XTF Tomcat Cognito setup - separate one used for testing - not really expected to be run.
Parameters:
  AppDomainBaseName:
      Type: String
      Default: ancestral.pictures
  CognitoBaseName:
      Type: String
      Default: ancestral-pictures
  LWAClientId:
      Type: String
      Default: amzn1.application-oa2-client.b2d624fcfa1e47a69ebcd08b04e159c4
  LWAClientSecret:
    Type: String
    Default: 457a789515783e8e4429b2f008ba5c084ad56c4c6c07660b494571d4ed6eedf9
Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      #AliasAttributes: - given_name - family_name - email   #TODO determine where to put these
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      MfaConfiguration: 'OFF'
      UserPoolName: !Sub '${CognitoBaseName}.pool'
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub '${CognitoBaseName}'
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolIdentityProvider:
    Type: 'AWS::Cognito::UserPoolIdentityProvider'
    Properties:
      AttributeMapping:
        email: email
        family_name: name
        given_name: name
        username: user_id
      ProviderDetails:
        client_id: !Ref LWAClientId
        client_secret: !Ref LWAClientSecret
        authorize_scopes: 'profile:email profile:name'
      ProviderName: LoginWithAmazon
      ProviderType: LoginWithAmazon
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DependsOn: CognitoUserPoolIdentityProvider
    Properties: 
      AccessTokenValidity: 1
      AllowedOAuthFlows:
        - code  # Flows and Scopes required - code is the minimum
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes: 
        - openid
      CallbackURLs: 
        - !Sub 'https://${AppDomainBaseName}/oauth2/idpresponse'
      ClientName: !Sub '${CognitoBaseName}.client'
      ExplicitAuthFlows: 
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: true  #required by ALB Listener
      IdTokenValidity: 1
      PreventUserExistenceErrors: ENABLED  # necessary for Oauth?
      ReadAttributes:
        - address
        - birthdate
        - email
        - email_verified
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - phone_number_verified
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo
      RefreshTokenValidity: 24
      SupportedIdentityProviders: 
        - LoginWithAmazon
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: hours
      UserPoolId: !Ref CognitoUserPool
      WriteAttributes: 
        - address
        - birthdate
        - email
        - family_name
        - gender
        - given_name
        - locale
        - middle_name
        - name
        - nickname
        - phone_number
        - picture
        - preferred_username
        - profile
        - updated_at
        - website
        - zoneinfo
Outputs:
  UserPoolArn:
    Description: The ARN of the user pool
    Value: !GetAtt CognitoUserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CognitoUserPoolArn'
  UserPoolClientId:
    Description: The ClientId in the user pool
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-CognitoUserPoolClientId'
  UserPoolDomain:
    Description: The Domain in the user pool
    Value: !Ref CognitoUserPoolDomain
    Export:
      Name: !Sub '${AWS::StackName}-CognitoUserPoolDomain'
